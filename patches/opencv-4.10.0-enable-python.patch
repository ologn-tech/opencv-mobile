diff --git a/modules/core/misc/python/pyopencv_cuda.hpp b/modules/core/misc/python/pyopencv_cuda.hpp
deleted file mode 100644
index 25b4278..0000000
--- a/modules/core/misc/python/pyopencv_cuda.hpp
+++ /dev/null
@@ -1,36 +0,0 @@
-#ifdef HAVE_OPENCV_CORE
-
-
-typedef std::vector<cuda::GpuMat> vector_GpuMat;
-typedef cuda::GpuMat::Allocator GpuMat_Allocator;
-typedef cuda::HostMem::AllocType HostMem_AllocType;
-typedef cuda::Event::CreateFlags Event_CreateFlags;
-
-template<> struct pyopencvVecConverter<cuda::GpuMat>
-{
-    static bool to(PyObject* obj, std::vector<cuda::GpuMat>& value, const ArgInfo& info)
-    {
-        return pyopencv_to_generic_vec(obj, value, info);
-    }
-
-    static PyObject* from(const std::vector<cuda::GpuMat>& value)
-    {
-        return pyopencv_from_generic_vec(value);
-    }
-};
-
-CV_PY_TO_CLASS(cuda::GpuMat)
-CV_PY_TO_CLASS(cuda::Stream)
-CV_PY_TO_CLASS(cuda::Event)
-CV_PY_TO_CLASS(cuda::HostMem)
-
-CV_PY_TO_CLASS_PTR(cuda::GpuMat)
-CV_PY_TO_CLASS_PTR(cuda::GpuMat::Allocator)
-
-CV_PY_FROM_CLASS(cuda::GpuMat)
-CV_PY_FROM_CLASS(cuda::Stream)
-CV_PY_FROM_CLASS(cuda::HostMem)
-
-CV_PY_FROM_CLASS_PTR(cuda::GpuMat::Allocator)
-
-#endif
diff --git a/modules/core/misc/python/pyopencv_umat.hpp b/modules/core/misc/python/pyopencv_umat.hpp
deleted file mode 100644
index 2e91cd5..0000000
--- a/modules/core/misc/python/pyopencv_umat.hpp
+++ /dev/null
@@ -1,36 +0,0 @@
-#ifdef HAVE_OPENCV_CORE
-
-#include "opencv2/core/mat.hpp"
-
-typedef std::vector<Range> vector_Range;
-
-CV_PY_TO_CLASS(UMat)
-CV_PY_FROM_CLASS(UMat)
-
-static bool cv_mappable_to(const Ptr<Mat>& src, Ptr<UMat>& dst)
-{
-    //dst.reset(new UMat(src->getUMat(ACCESS_RW)));
-    dst.reset(new UMat());
-    src->copyTo(*dst);
-    return true;
-}
-
-static void* cv_UMat_queue()
-{
-    return cv::ocl::Queue::getDefault().ptr();
-}
-
-static void* cv_UMat_context()
-{
-    return cv::ocl::Context::getDefault().ptr();
-}
-
-static Mat cv_UMat_get(const UMat* _self)
-{
-    Mat m;
-    m.allocator = &GetNumpyAllocator();
-    _self->copyTo(m);
-    return m;
-}
-
-#endif
diff --git a/modules/core/misc/python/shadow_umat.hpp b/modules/core/misc/python/shadow_umat.hpp
deleted file mode 100644
index b194aac..0000000
--- a/modules/core/misc/python/shadow_umat.hpp
+++ /dev/null
@@ -1,59 +0,0 @@
-#error This is a shadow header file, which is not intended for processing by any compiler. \
-       Only bindings parser should handle this file.
-
-namespace cv
-{
-
-class CV_EXPORTS_W UMat
-{
-public:
-    //! default constructor
-    CV_WRAP UMat(UMatUsageFlags usageFlags = USAGE_DEFAULT);
-    //! constructs 2D matrix of the specified size and type
-    // (_type is CV_8UC1, CV_64FC3, CV_32SC(12) etc.)
-    CV_WRAP UMat(int rows, int cols, int type, UMatUsageFlags usageFlags = USAGE_DEFAULT);
-    CV_WRAP UMat(Size size, int type, UMatUsageFlags usageFlags = USAGE_DEFAULT);
-    //! constructs 2D matrix and fills it with the specified value _s.
-    CV_WRAP UMat(int rows, int cols, int type, const Scalar& s, UMatUsageFlags usageFlags = USAGE_DEFAULT);
-    CV_WRAP UMat(Size size, int type, const Scalar& s, UMatUsageFlags usageFlags = USAGE_DEFAULT);
-
-    //! Mat is mappable to UMat
-    CV_WRAP_MAPPABLE(Ptr<Mat>);
-
-    //! returns the OpenCL queue used by OpenCV UMat
-    CV_WRAP_PHANTOM(static void* queue());
-
-    //! returns the OpenCL context used by OpenCV UMat
-    CV_WRAP_PHANTOM(static void* context());
-
-    //! copy constructor
-    CV_WRAP UMat(const UMat& m);
-
-    //! creates a matrix header for a part of the bigger matrix
-    CV_WRAP UMat(const UMat& m, const Range& rowRange, const Range& colRange = Range::all());
-    CV_WRAP UMat(const UMat& m, const Rect& roi);
-    CV_WRAP UMat(const UMat& m, const std::vector<Range>& ranges);
-
-    //CV_WRAP_AS(get) Mat getMat(int flags CV_WRAP_DEFAULT(ACCESS_RW)) const;
-    //! returns a numpy matrix
-    CV_WRAP_PHANTOM(Mat get() const);
-
-    //! returns true iff the matrix data is continuous
-    // (i.e. when there are no gaps between successive rows).
-    // similar to CV_IS_MAT_CONT(cvmat->type)
-    CV_WRAP bool isContinuous() const;
-
-    //! returns true if the matrix is a submatrix of another matrix
-    CV_WRAP bool isSubmatrix() const;
-
-    /*! Returns the OpenCL buffer handle on which UMat operates on.
-    The UMat instance should be kept alive during the use of the handle to prevent the buffer to be
-    returned to the OpenCV buffer pool.
-    */
-    CV_WRAP void* handle(AccessFlag accessFlags) const;
-
-    // offset of the submatrix (or 0)
-    CV_PROP_RW size_t offset;
-};
-
-} // namespace cv
diff --git a/modules/features2d/src/matchers.cpp b/modules/features2d/src/matchers.cpp
index 3a983ea..46e96e1 100644
--- a/modules/features2d/src/matchers.cpp
+++ b/modules/features2d/src/matchers.cpp
@@ -1058,21 +1058,7 @@ void FlannBasedMatcher::add( InputArrayOfArrays _descriptors )
 {
     DescriptorMatcher::add( _descriptors );
 
-    if( _descriptors.isUMatVector() )
-    {
-        std::vector<UMat> descriptors;
-        _descriptors.getUMatVector( descriptors );
-
-        for( size_t i = 0; i < descriptors.size(); i++ )
-        {
-            addedDescCount += descriptors[i].rows;
-        }
-    }
-    else if( _descriptors.isUMat() )
-    {
-        addedDescCount += _descriptors.getUMat().rows;
-    }
-    else if( _descriptors.isMatVector() )
+    if( _descriptors.isMatVector() )
     {
         std::vector<Mat> descriptors;
         _descriptors.getMatVector(descriptors);
@@ -1087,7 +1073,7 @@ void FlannBasedMatcher::add( InputArrayOfArrays _descriptors )
     }
     else
     {
-        CV_Assert( _descriptors.isUMat() || _descriptors.isUMatVector() || _descriptors.isMat() || _descriptors.isMatVector() );
+        CV_Assert( _descriptors.isMat() || _descriptors.isMatVector() );
     }
 }
 
diff --git a/modules/highgui/CMakeLists.txt b/modules/highgui/CMakeLists.txt
index 25fb521..3b97aa6 100644
--- a/modules/highgui/CMakeLists.txt
+++ b/modules/highgui/CMakeLists.txt
@@ -1,5 +1,5 @@
 set(the_description "High-level GUI")
-ocv_add_module(highgui opencv_imgproc)
+ocv_add_module(highgui opencv_imgproc WRAP python)
 
 option(WITH_CVI "build with cvi" OFF)
 option(WITH_AW "build with aw" OFF)
diff --git a/modules/highgui/include/opencv2/highgui/highgui.hpp b/modules/highgui/include/opencv2/highgui/highgui.hpp
index b253077..77b478a 100644
--- a/modules/highgui/include/opencv2/highgui/highgui.hpp
+++ b/modules/highgui/include/opencv2/highgui/highgui.hpp
@@ -75,21 +75,23 @@ class VideoCaptureImpl;
 class CV_EXPORTS_W VideoCapture
 {
 public:
-    VideoCapture();
+    CV_WRAP VideoCapture();
 
     ~VideoCapture();
 
-    bool open(int index);
+    CV_WRAP bool open(int index);
 
-    bool isOpened() const;
+    CV_WRAP bool isOpened() const;
 
-    void release();
+    CV_WRAP void release();
 
-    VideoCapture& operator>>(Mat& bgr_image);
+    VideoCapture& operator>>(Mat& image);
 
-    bool set(int propId, double value);
+    CV_WRAP bool read(OutputArray image);
 
-    double get(int propId) const;
+    CV_WRAP bool set(int propId, double value);
+
+    CV_WRAP double get(int propId) const;
 
 private:
     VideoCaptureImpl* const d;
diff --git a/modules/highgui/src/videocapture.cpp b/modules/highgui/src/videocapture.cpp
index 7e33b03..785128e 100644
--- a/modules/highgui/src/videocapture.cpp
+++ b/modules/highgui/src/videocapture.cpp
@@ -240,16 +240,23 @@ void VideoCapture::release()
 }
 
 VideoCapture& VideoCapture::operator>>(Mat& image)
+{
+    read(image);
+
+    return *this;
+}
+
+bool VideoCapture::read(OutputArray image)
 {
     if (!d->is_opened)
-        return *this;
+        return false;
 
 #if CV_WITH_AW
     if (capture_v4l2_aw_isp::supported())
     {
         image.create(d->height, d->width, CV_8UC3);
 
-        d->cap_v4l2_aw_isp.read_frame((unsigned char*)image.data);
+        d->cap_v4l2_aw_isp.read_frame((unsigned char*)image.getMat().data);
     }
     else
 #endif
@@ -258,7 +265,7 @@ VideoCapture& VideoCapture::operator>>(Mat& image)
     {
         image.create(d->height, d->width, CV_8UC3);
 
-        d->cap_v4l2_rk_aiq.read_frame((unsigned char*)image.data);
+        d->cap_v4l2_rk_aiq.read_frame((unsigned char*)image.getMat().data);
     }
     else
 #endif
@@ -267,7 +274,7 @@ VideoCapture& VideoCapture::operator>>(Mat& image)
     {
         image.create(d->height, d->width, CV_8UC3);
 
-        d->cap_cvi.read_frame((unsigned char*)image.data);
+        d->cap_cvi.read_frame((unsigned char*)image.getMat().data);
     }
     else
 #endif
@@ -276,14 +283,14 @@ VideoCapture& VideoCapture::operator>>(Mat& image)
     {
         image.create(d->height, d->width, CV_8UC3);
 
-        d->cap_v4l2.read_frame((unsigned char*)image.data);
+        d->cap_v4l2.read_frame((unsigned char*)image.getMat().data);
     }
     else
 #endif
     {
     }
 
-    return *this;
+    return !image.empty();
 }
 
 bool VideoCapture::set(int propId, double value)
diff --git a/modules/python/src2/cv2.cpp b/modules/python/src2/cv2.cpp
index a7837a6..d7ddb2a 100644
--- a/modules/python/src2/cv2.cpp
+++ b/modules/python/src2/cv2.cpp
@@ -40,7 +40,6 @@ typedef std::vector<RotatedRect> vector_RotatedRect;
 typedef std::vector<KeyPoint> vector_KeyPoint;
 typedef std::vector<Mat> vector_Mat;
 typedef std::vector<std::vector<Mat> > vector_vector_Mat;
-typedef std::vector<UMat> vector_UMat;
 typedef std::vector<DMatch> vector_DMatch;
 typedef std::vector<String> vector_String;
 typedef std::vector<std::string> vector_string;
diff --git a/modules/python/src2/cv2_highgui.cpp b/modules/python/src2/cv2_highgui.cpp
index 4262043..4cbcd13 100644
--- a/modules/python/src2/cv2_highgui.cpp
+++ b/modules/python/src2/cv2_highgui.cpp
@@ -55,7 +55,9 @@ PyObject *pycvSetMouseCallback(PyObject*, PyObject *args, PyObject *kw)
     {
         registered_callbacks.insert(std::pair<std::string, PyObject*>(std::string(name), py_callback_info));
     }
+#if 0
     ERRWRAP2(setMouseCallback(name, OnMouse, py_callback_info));
+#endif
     Py_RETURN_NONE;
 }
 
@@ -78,6 +80,7 @@ static void OnChange(int pos, void *param)
 }
 
 // workaround for #20408, use nullptr, set value later
+#if 0
 static int _createTrackbar(const String &trackbar_name, const String &window_name, int value, int count,
                     TrackbarCallback onChange, PyObject* py_callback_info)
 {
@@ -85,6 +88,7 @@ static int _createTrackbar(const String &trackbar_name, const String &window_nam
     setTrackbarPos(trackbar_name, window_name, value);
     return n;
 }
+#endif
 
 PyObject *pycvCreateTrackbar(PyObject*, PyObject *args)
 {
@@ -113,7 +117,9 @@ PyObject *pycvCreateTrackbar(PyObject*, PyObject *args)
     {
         registered_callbacks.insert(std::pair<std::string, PyObject*>(name, py_callback_info));
     }
+#if 0
     ERRWRAP2(_createTrackbar(trackbar_name, window_name, value, count, OnChange, py_callback_info));
+#endif
     Py_RETURN_NONE;
 }
 
@@ -177,7 +183,9 @@ PyObject *pycvCreateButton(PyObject*, PyObject *args, PyObject *kw)
     {
         registered_callbacks.insert(std::pair<std::string, PyObject*>(name, py_callback_info));
     }
+#if 0
     ERRWRAP2(createButton(button_name, OnButtonChange, py_callback_info, button_type, initial_button_state != 0));
+#endif
     Py_RETURN_NONE;
 }
 
diff --git a/modules/python/src2/gen2.py b/modules/python/src2/gen2.py
index 29a9195..b3b8c0b 100755
--- a/modules/python/src2/gen2.py
+++ b/modules/python/src2/gen2.py
@@ -1310,7 +1310,7 @@ class PythonWrapperGenerator(object):
 
     def gen(self, srcfiles, output_path):
         self.clear()
-        self.parser = hdr_parser.CppHeaderParser(generate_umat_decls=True, generate_gpumat_decls=True)
+        self.parser = hdr_parser.CppHeaderParser(generate_umat_decls=False, generate_gpumat_decls=False)
 
 
         # step 1: scan the headers and build more descriptive maps of classes, consts, functions
